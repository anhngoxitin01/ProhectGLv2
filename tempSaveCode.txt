
**********************************************
**********************************************
**********************************************
**********************************************
**********************************************
**********************************************
**********************************************
code for add item in map

// items_map
	std::shared_ptr<Sprite2D> item_map = std::make_shared<Sprite2D>(model, shader, texture);

	// border corner
	model = ResourceManagers::GetInstance()->GetModel("Sprite2D.nfg");
	shader = ResourceManagers::GetInstance()->GetShader("TextureShader");

	texture = ResourceManagers::GetInstance()->GetTexture("bottom_left_corner.tga");
	item_map = std::make_shared<Sprite2D>(model, shader, texture);
	item_map->Set2DPosition(25, Globals::screenHeight - Globals::item_size / 2);
	item_map->SetSize(Globals::item_size, Globals::item_size);
	m_list_items_map.push_back(item_map);

	texture = ResourceManagers::GetInstance()->GetTexture("bottom_right_corner.tga");
	item_map = std::make_shared<Sprite2D>(model, shader, texture);
	item_map->Set2DPosition((Globals::screenWidth - Globals::menuGPWidth + Globals::item_size/2) 
		, Globals::screenHeight - Globals::item_size / 2);
	item_map->SetSize(Globals::item_size, Globals::item_size);
	m_list_items_map.push_back(item_map);

	//border top
	for (int i = 0; i < 14; i++)
	{
		//if corner
		if (i == 0)
		{
			texture = ResourceManagers::GetInstance()->GetTexture("top_left_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size / 2, Globals::item_size / 2);
		}
		else if (i == 13)
		{
			texture = ResourceManagers::GetInstance()->GetTexture("top_right_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * i + Globals::item_size / 2
				, Globals::item_size / 2);
		}
		else 
		{
			//other border
			texture = ResourceManagers::GetInstance()->GetTexture("top_border.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			// plus with range of border corner
			item_map->Set2DPosition(Globals::item_size * i + Globals::item_size / 2
				, Globals::item_size / 2);
		}
		item_map->SetSize(Globals::item_size, Globals::item_size);
		m_list_items_map.push_back(item_map);
	}

	//border bottom
	for (int i = 0; i < 14; i++)
	{
		//if corner
		if (i == 0)
		{
			texture = ResourceManagers::GetInstance()->GetTexture("bottom_left_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size / 2, 
				Globals::screenHeight - Globals::item_size / 2);
		}
		else if (i == 13)
		{
			texture = ResourceManagers::GetInstance()->GetTexture("bottom_right_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * i + Globals::item_size / 2
				, Globals::screenHeight - Globals::item_size / 2);
		}
		else
		{
			//other border
			texture = ResourceManagers::GetInstance()->GetTexture("bottom_border.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			// plus with range of border corner
			item_map->Set2DPosition(Globals::item_size * i + Globals::item_size / 2
				, Globals::screenHeight - Globals::item_size / 2);
		}
		item_map->SetSize(Globals::item_size, Globals::item_size);
		m_list_items_map.push_back(item_map);
	}

===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
// code for read file by text

//test read file 
	//create a array
	int row = 14; 
	int col = 2;
	char* namePath = "C:/Users/han.glschool/Desktop/New folder/ProjectGLv2/test.txt";

	char** arr = new char* [row];
	for (int i = 0; i < row; i++)
		arr[i] = new char[col];

	//read file
	FILE* f = fopen(namePath, "r");
	// one line just have 14c
	if (f == NULL)
		perror("Cannot open file");
	char buffer[14];
	fgets(buffer, 14, f);
	int index = 0; // index for col
	while (!feof(f))
	{
		for (int i = 0; i < row; i++)
		{
			arr[index][i] = buffer[i];
			printf("buffer[%d] = %d ", i, buffer[i]);
		}
		printf("\n");
		index++;
		fgets(buffer, 14, f);
	}
	fclose(f);

	// draw map
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			switch (arr[i][j])
			{
			case 1: /// tuong
				//draw tuong
				break;
			case 2: // nam
				//draw nam
				break;
			default:
				break;
			}
		}
	}

===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
//code for draw map not through the reading text

//draw map and item
	//create item_map shader
	std::shared_ptr<Sprite2D> item_map = std::make_shared<Sprite2D>(model, shader, texture);
	item_map->SetSize(Globals::item_size, Globals::item_size);
	//get map from file 
	m_map = ResourceManagers::GetInstance()->getMapFromPathWithConstCR(PATHFILE_MAP_1);
	for (int i = 0; i < Globals::rowMap; i++)
	{
		for (int j = 0; j < Globals::colMap; j++)
		{
			switch (arr[i][j])
			{
				case MAP_TOP_LEFT_CORNER:	
				{
					texture = ResourceManagers::GetInstance()->GetTexture("map_top_left_corner.tga");
					item_map = std::make_shared<Sprite2D>(model, shader, texture);
					item_map->Set2DPosition(Globals::item_size * j + Globals::item_size / 2
						, Globals::item_size * i + Globals::item_size / 2);
					m_list_items_map.push_back(item_map);
					break;
				}
				case MAP_TOP_RIGHT_CORNER:
				{
					texture = ResourceManagers::GetInstance()->GetTexture("map_top_right_corner.tga");
					item_map = std::make_shared<Sprite2D>(model, shader, texture);
					item_map->Set2DPosition(Globals::item_size * j + Globals::item_size / 2
						, Globals::item_size * i + Globals::item_size / 2);
					m_list_items_map.push_back(item_map);
					break;
				}
				case MAP_BOTTOM_LEFT_CORNER:
				{
					texture = ResourceManagers::GetInstance()->GetTexture("map_bottom_left_corner.tga");
					item_map = std::make_shared<Sprite2D>(model, shader, texture);
					item_map->Set2DPosition(Globals::item_size * j + Globals::item_size / 2
						, Globals::item_size * i + Globals::item_size / 2);
					m_list_items_map.push_back(item_map);
					break;
				}
				case MAP_BOTTOM_RIGHT_CORNER:
				{
					texture = ResourceManagers::GetInstance()->GetTexture("map_bottom_right_corner.tga");
					item_map = std::make_shared<Sprite2D>(model, shader, texture);
					item_map->Set2DPosition(Globals::item_size * j + Globals::item_size / 2
						, Globals::item_size * i + Globals::item_size / 2);
					m_list_items_map.push_back(item_map);
					break;
				}
				case MAP_TOP_BORDER:
				{
					texture = ResourceManagers::GetInstance()->GetTexture("map_top_border.tga");
					item_map = std::make_shared<Sprite2D>(model, shader, texture);
					item_map->Set2DPosition(Globals::item_size * j + Globals::item_size / 2
						, Globals::item_size * i + Globals::item_size / 2);
					m_list_items_map.push_back(item_map);
					break;
				}
				/*case MAP_BOTTOM_BORDER:
				{
					texture = ResourceManagers::GetInstance()->GetTexture("map_bottom_border.tga");
					item_map = std::make_shared<Sprite2D>(model, shader, texture);
					item_map->Set2DPosition(Globals::item_size * j + Globals::item_size / 2
						, Globals::item_size * i + Globals::item_size / 2);
					m_list_items_map.push_back(item_map);
					break;
				}*/
				default:
					break;
			}
		}
		
	}
	printf("============Draw border done");


===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
//code for update texture player when get key


switch (ResourceManagers::GetInstance()->getDirectionPlayer())
		{
		case PLAYER_MOVE_DOWN:
			m_player->SetTexture(ResourceManagers::GetInstance()->GetTexture("bomber_down"));
			break;
		case PLAYER_MOVE_UP:
			m_player->SetTexture(ResourceManagers::GetInstance()->GetTexture("bomber_up"));
			break;
		default:
			break;
		}



===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
//read map through file

//read file
	ResourceManagers::GetInstance()->readMapFromFile(PATHFILE_MAP_1, m_map);
	//check map in cmd
	for (int i = 0; i < Globals::rowMap * Globals::colMap; i++)
	{
		if (i % Globals::colMap == 0)
			printf("\n");
		printf("%d", m_map[i]);
	}
	//create item_map shader
	std::shared_ptr<Sprite2D> item_map = std::make_shared<Sprite2D>(model, shader, texture);
	//run for to add item map
	for (int i = 0; i < Globals::rowMap * Globals::colMap; i++)
	{
		switch (m_map[i])
		{
		case MAP_TOP_LEFT_CORNER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_top_left_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_TOP_RIGHT_CORNER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_top_right_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_BOTTOM_LEFT_CORNER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_bottom_left_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_BOTTOM_RIGHT_CORNER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_bottom_right_corner.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_TOP_BORDER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_top_border.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_BOTTOM_BORDER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_bottom_border.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_LEFT_BORDER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_left_border.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_RIGHT_BORDER:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_right_border.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_ITEM_TREE:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_item_tree.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_ITEM_BUSH:
		{
			texture = ResourceManagers::GetInstance()->GetTexture("map_item_bush.tga");
			item_map = std::make_shared<Sprite2D>(model, shader, texture);
			item_map->Set2DPosition(Globals::item_size * (i % Globals::colMap) + Globals::item_size / 2
				, Globals::item_size * (i / Globals::rowMap) + Globals::item_size / 2);
			item_map->SetSize(Globals::item_size, Globals::item_size);
			m_list_items_map.push_back(item_map);
			break;
		}
		case MAP_PLAYER_SPON:
		{
			ResourceManagers::GetInstance()->managerPlayer()->setPlayerLocation(Globals::item_size* (i% Globals::colMap) + Globals::item_size / 2
				, Globals::item_size* (i / Globals::rowMap) + (PLAYER_SIZE_Y - Globals::item_size)/2);
			break;
		}
		default:
			break;
		}
	}


===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================
===============================================================================================================

// get key to update player 

if(bIsPressed)
	//{
	//	switch (key)
	//	{
	//	case KEY_DOWN:
	//		//printf("press down\n");
	//		//m_key[PLAYER_MOVE_DOWN] = true;
	//		ResourceManagers::GetInstance()->managerPlayer()->movePlayer(PLAYER_MOVE_DOWN);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerDirection(PLAYER_MOVE_DOWN);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerIsMoving(true);
	//		break;
	//	case KEY_UP:
	//		//printf("press up\n");
	//		//m_key[PLAYER_MOVE_UP] = true;
	//		ResourceManagers::GetInstance()->managerPlayer()->movePlayer(PLAYER_MOVE_UP);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerDirection(PLAYER_MOVE_UP);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerIsMoving(true);
	//		break;
	//	case KEY_RIGHT:
	//		//printf("press right\n");
	//		//m_key[PLAYER_MOVE_RIGHT] = true;
	//		ResourceManagers::GetInstance()->managerPlayer()->movePlayer(PLAYER_MOVE_RIGHT);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerDirection(PLAYER_MOVE_RIGHT);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerIsMoving(true);
	//		break;
	//	case KEY_LEFT:
	//		//printf("press left\n");
	//		//m_key[PLAYER_MOVE_LEFT] = true;
	//		ResourceManagers::GetInstance()->managerPlayer()->movePlayer(PLAYER_MOVE_LEFT);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerDirection(PLAYER_MOVE_LEFT);
	//		ResourceManagers::GetInstance()->managerPlayer()->setPlayerIsMoving(true);
	//		break;
	//	default:
	//		break;
	//	}
	//}
	//else
	//{
	//	ResourceManagers::GetInstance()->managerPlayer()->setPlayerIsMoving(false);
	//}